
Image: u32[][]
Depth_buffer: u32[][]
Time: u64

Mesh_content: {HAS_POS:bool, HAS_NORMAL:bool, HAS_COLOR:bool, HAS_UV:bool}

Mesh: (Mesh_content, n_verts: u32, n_ind: u32)
-> extern {
    data: f32[n_verts][3 * (using Mesh_content._ HAS_POS + HAS_NORMAL + HAS_COLOR + HAS_UV)]
    ind: u32[n_ind][3]
    trans_mat: f32[4][4]
}

Joint_type: ident: { BALL, LINEAR, HINGE, FIXED }

Joint: {
    | Joint_type:this
    | part_a: ident from Part
    | part_a_jpos: f32[3]
    | part_b: ident from Part
    | part_b_jpos: f32[3]
    | joint_normal: f32[3] req Joint_type == LINEAR || Joint_type == HINGE
    joint_force: f32[3]
}

Material: {
    density: f32
    E_module: f32
    poisson_number: f32
}

Part: {
    Mesh: this // doesnt need | beacuse it is extern and therefore not in control of hg
    | Material: this
    physic_update: Time: 0
    Time: this
    
    trigger physic_update > 0 {
        Time += physic_update
        physic_update = 0
    }
}


Mechanical_part: (n_joints: u32)
-> {
    Joints: Joint[n_joints]
    Part: this
}

Robot: {
    | mech_parts: Mechanical_part[]
    | parts: Part[]
    Time: 0 req Time from this\first.all == this
    update_frequency: Time
    
    trigger !(Time % update_frequency) {
        Update_robot(this)
    }
    
    trigger Time from this.all == t:symbol { // very declarative, very complicated. Requires equation solving
        Time = t
    }
}

Update_robot: (robot: Robot)
{
    exmth: this(C, "update_robot", robot)
} -> {robot}

Render_buffer: {
    Image: this
    Depth_buffer: this
    Time: this
}

Rasterizer: (Mesh: this         req Time from this\first.all == t:symbol,
             Render_buffer:this req this.Time == t)
{
    exmth: this(CUDA, "rasterize_triangles", Mesh, Render_buffer)
} -> {Render_buffer <- Mesh\first}


Constraint: {
    // some general physics constraint stuff
}

Joint_to_Constraint: (Joint)
{
    constraint: Constraint /*some conversion procedure*/
} -> {constraint}

Physics: (exlayout SoA meshes: all Part.Mesh req all Time from this.Mesh == t:symbol && t == future_time - dt
          constraints: Constraint[]: Joint_to_Constraint(all Mechanical_part.joints.Joint)
          future_time: Time
          | dt: f32: 0.1 * Seconds)
{
    exmth: this(CUDA, "calc_physics", meshes, constraints)
    meshes\physics_update += dt
} -> { meshes }
